x
print(x)
x <- 1:20
x
x <- c(0.5,0.6)
x
x <-9:29
x
x <- vector("numeric",length = 10)
x
y <- c(1.7,"a")
y
y <- c(TRUE,2)
y
x <- 0:6
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
x <- list(1,"a",TRUE, 1 + 4i)
x
m <-matrix(nrow=2,ncol=3)
m
dim(m)
attributes(m)
m <- matrix (1:6, nrow=2,ncol=3)
m
m <- 1:10
m
dim(m)<-c(2,5)
m
x<-1:3
y<-10:12
cbind(x,y)
rbind(x,y)
x <-factor(c("yes","yes","no","yes","no"))
x
table(x)
unclass(x)
x <-factor(c("yes","yes","no","yes","no"), levels = c("yes","no"))
x
x <- c(1,2,NA,10,3)
is.na(x)
is.nan(x)
x <- c(1,2,NaN,NA,3)
is.na(x)
is.nan(x)
x <- data.frame (foo=1:4, bar = c(T,T,F,F))
x
nrow(x)
ncol(x)
x <- 1:3
name(x)
names(x)
names(x) <- c("foo","bar","norf")
x
names(x)
x <- list(a=1,b=2,c=3)
x
m <- matrix (1:4, nrow=2,ncol=2)
dimnames(m) <- list(c("a","b"), c("c","d"))
m
x <- c("a","b","c","c","d","a")
x[1]
x[1:4]
x[x>"a"]
u <- x >"a"
u
x[u]
x <-matrix(1:6,2,3)
x
x[1,2]
x[2,1]
x[1,]
x[,2]
x <-list(aardvark=1:5)
x$a
x <-c(1,2,NA,4,NA,5)
bad <-is.na(x)
x[!bad]
x <-1:4; y<-6:9
x + y
x > 2
x >=2
y == 8
x * y
x / y
getwd
getwd()
read.csv("hw1_data.csv")
x <- read.csv("hw1_data.csv")
x
cnames(x)
dimnames(x)
x
x[,2]
x[2,]
x[1:2,]
x[152:153,]
x[47,1]
ozone_data <- x[,1]
ozone_data
bad <- is.na(ozone_data)
new_data = ozone_data[!bad]
new_data
mean(new_data)
x
new_ozone <- x[ozone>31]
new_ozone <- x[sample(which(Ozone>=30),)]
new_ozone <- x[sample(which($Ozone>=30),)]
new_data <- x[which(x$Ozone >31 & x$Temp > 90),]
new_data
solar <- x[2,]
soalr
solar
solar <- x[,2]
solar
solar <- new_data[,2]
solar
mean(solar)
new_month <-x[which(x$Month == 6),]
new_month
mean_temp <- mean(new_month[,4])
mean_temp
max_ozone <- x[which(x$Month==5),]
max_ozone
calc_max_ozone <- max(max_ozone[1,])
calc_max_ozone
bad<-is.na(max_ozone)
new_data <- max_ozone[!bad]
new_data
calc_max_ozone
max_ozone
only_ozone <- max_ozone[,1]
only_ozone
bad <- is.na(only_ozone)
new_data <- only_ozone[!bad]
calc_new_data <- max(new_data)
calc_new_data
x
x[,2]
x[2,]
x[1:2,]
x[152:153,]
x[47,]
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
play()
ls()
nxt()
ls()
list.files()
help(list.files)
?list.files
play()
args(list.files)
nxt()
args(list.files)
play()
getwd()
old.dir <- "C:/Users/Owner/Documents"
old.dir
nxt()
old.dir <- "C:/Users/Owner/Documents"
old.dir <-getwd()
play()
dir.create("testdir")
ls
ls()
list.files()
nxt()
dir.create("testdir")
getwd()
setwd("testdir")
play()
file.create("mytest.R")
nxt()
file.create("mytest.R")
list.files()
file.exists("mytest.R")
play()
file.info("mytest.R")
nxt()
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
play()
dir.create("testdir2")
list.files
list.files()
getwd()
dir.create("")
next()
nxt()
dir.create("testdir2")
dir.create("testdir2/testdir3", recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir",recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(1,10,by=0.5)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2), each=10)
install_from_swirl("R programming")
swirl()
library(swirl)
swirl()
num_vect <- c(0.5,55,-10,6)
tf <- (num_vect < 1)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My","name","is")
my_char
paste (my_char, collapse = " ")
my_name <- c(my_char,"Shanna")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3),c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x <- c(44,NA,5,NA)
x*3
y <-rnorm(1000)
z<-rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(my_matrix,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(my_matrix,patients)
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
add2 <- function(x,y){
x + y
}
add2(3,5)
above <- function(x,n){
use <- x > n
x[use]
}
x <- 1:20
above(x,12)
above <- function(x,n=10){
use <- x > n
x[use]
}
above(12)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
}
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i])
}
means
}
columnmean <- function(y,removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i],na.rm = removeNA)
}
means
}
library(swirl)
swirl ()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 NOT 7
5 ! 7
5 != 7
5 != 7
5 NOT= 7
info()
nxt()
?NOT
NOT(5 == 7)
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6!= 8 && 4 > 3.9
isTrue(6>4)
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t1 <- as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17,1986 08:24"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1,units = 'days')
x <- list(a = 1:5, b = rnorm(10))
lapply(x,mean)
x <- matric (rnorm(200),20,10)
apply(x,2,mean)
x <- matrix (rnorm(200),20,10)
apply(x,2,mean)
apply(x,1,sum)
mapply (rep,1:4,4:1)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- g1(3,10)
f <- gl(3,10)
f
tapply(x,f,mean)
tapply(x,f,mean,simplify=FALSE)
tapply(x,f,range)
split(x,f)
lapply(split(x,f),mean)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(function(x) colMeans(x[,c("Ozone","Solar.R"."Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R"."Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone","Solar.R","Wind")]), na.rm=TRUE)
sapply(s, function(x) colMeans(x[, c("Ozone","Solar.R","Wind")], na.rm=TRUE))
x <-rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
interaction(f1,f2)
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2), drop=TRUE))
setwed(D://Data_Class/ProgrammingAssignment2)
setwed(D:/Data_Class/ProgrammingAssignment2)
setwed("D:/Data_Class/ProgrammingAssignment2/")
setwd("D:/Data_Class/ProgrammingAssignment2/")
getwd()
?matrix
?numeric
?matrix
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <-function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list (set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)){
message("getting cached data")
retutrn(m)
}
data <- x$get()
m <- solve(data,...)
x$setinverse(m)
## Return a matrix that is the inverse of 'x'
m
}
new_matrix <- makeCacheMatrix()
new_matrix$set(rnorm(16),ncol=4,nrow=4)
new_matrix$set(rnorm(16))
data <-(rnorm(16),nrow=4,ncol=4)
data <-matrix(rnorm(16),nrow=4,ncol=4)
data <-matrix(1:16,nrow=4,ncol=4)
new_matrix$set(data)
cacheSolve(new_matrix)
SW <-matrix(1:16,nrow=4,ncol=4)
new_matrix <- makeCacheMatrix()
new_matrix$set(SW)
cacheSolve(new_matrix)
SW <-matrix(rnorm(16),nrow=4,ncol=4)
new_matrix <- makeCacheMatrix()
new_matrix$set(SW)
cacheSolve(new_matrix)
